States
0 SHIFT - [S0->.S, S->.aA]

1 ACCEPT - [S0->S.]

2 SHIFT - [S->a.A, A->.bA, A->.c]

3 REDUCE - [S->aA.]

4 SHIFT - [A->b.A, A->.bA, A->.c]

5 REDUCE - [A->c.]

6 REDUCE - [A->bA.]


State transitions
(2, A) -> 3
(4, c) -> 5
(2, b) -> 4
(0, a) -> 2
(2, c) -> 5
(0, S) -> 1
(4, A) -> 6
(4, b) -> 4
Parsing Table: 
Row: stateIndex= 0, action='SHIFT', reduceNonTerminal='null', reduceContent = null, shifts = [(a, 2), (S, 1)]
Row: stateIndex= 1, action='ACCEPT', reduceNonTerminal='null', reduceContent = null, shifts = null
Row: stateIndex= 2, action='SHIFT', reduceNonTerminal='null', reduceContent = null, shifts = [(A, 3), (b, 4), (c, 5)]
Row: stateIndex= 3, action='REDUCE', reduceNonTerminal='S', reduceContent = [a, A], shifts = null
Row: stateIndex= 4, action='SHIFT', reduceNonTerminal='null', reduceContent = null, shifts = [(c, 5), (A, 6), (b, 4)]
Row: stateIndex= 5, action='REDUCE', reduceNonTerminal='A', reduceContent = [c], shifts = null
Row: stateIndex= 6, action='REDUCE', reduceNonTerminal='A', reduceContent = [b, A], shifts = null

ACCEPTED
Production strings: [S -> [a, A], A -> [b, A], A -> [b, A], A -> [c]]
Production number: [2, 0, 0, 1]
The output tree: 
ParsingTree.ParsingTreeRow: index = 0, info = S, leftChild = 1, rightSibling = -1, parent = -1, level = 0
ParsingTree.ParsingTreeRow: index = 1, info = a, leftChild = -1, rightSibling = 2, parent = 0, level = 1
ParsingTree.ParsingTreeRow: index = 2, info = A, leftChild = 3, rightSibling = -1, parent = 0, level = 1
ParsingTree.ParsingTreeRow: index = 3, info = b, leftChild = -1, rightSibling = 4, parent = 2, level = 2
ParsingTree.ParsingTreeRow: index = 4, info = A, leftChild = 5, rightSibling = -1, parent = 2, level = 2
ParsingTree.ParsingTreeRow: index = 5, info = b, leftChild = -1, rightSibling = 6, parent = 4, level = 3
ParsingTree.ParsingTreeRow: index = 6, info = A, leftChild = 7, rightSibling = -1, parent = 4, level = 3
ParsingTree.ParsingTreeRow: index = 7, info = c, leftChild = -1, rightSibling = -1, parent = 6, level = 4
